import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import { DM_Serif_Display } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "./contexts/AuthContext";
import { ThemeProvider } from "./contexts/ThemeContext";

const poppins = Poppins({
  variable: "--font-poppins",
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
  style: ["normal", "italic"],
});

const dmSerifDisplay = DM_Serif_Display({
  variable: "--font-dm-serif-display",
  subsets: ["latin"],
  weight: ["400"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                function setMobileBackground() {
                  if (window.innerWidth <= 768) {
                    const isDark = document.documentElement.classList.contains('dark');
                    const mobileBg = isDark 
                      ? 'url("/background-black_iPhone 14 & 15 Pro Max.png?v=1")'
                      : 'url("/background-white_iPhone 14 & 15 Pro Max.png?v=1")';
                    
                    // Apply to multiple elements to ensure it sticks
                    const elements = [document.documentElement, document.body, document.getElementById('__next')];
                    elements.forEach(el => {
                      if (el) {
                        el.style.backgroundImage = mobileBg;
                        el.style.backgroundSize = 'contain';
                        el.style.backgroundPosition = 'center';
                        el.style.backgroundRepeat = 'no-repeat';
                        el.style.backgroundAttachment = 'fixed';
                      }
                    });
                  }
                }
                
                // Apply immediately
                setMobileBackground();
                
                // Apply on resize
                window.addEventListener('resize', setMobileBackground);
                
                // Apply multiple times after React loads
                setTimeout(setMobileBackground, 50);
                setTimeout(setMobileBackground, 100);
                setTimeout(setMobileBackground, 200);
                setTimeout(setMobileBackground, 500);
                setTimeout(setMobileBackground, 1000);
                setTimeout(setMobileBackground, 2000);
                
                // Apply on DOM content loaded
                document.addEventListener('DOMContentLoaded', setMobileBackground);
                
                // Apply on window load
                window.addEventListener('load', setMobileBackground);
                
                // Apply periodically for the first few seconds
                let count = 0;
                const interval = setInterval(() => {
                  setMobileBackground();
                  count++;
                  if (count > 10) clearInterval(interval);
                }, 200);
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${poppins.variable} ${dmSerifDisplay.variable} antialiased`}>
        <ThemeProvider>
          <AuthProvider>{children}</AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
